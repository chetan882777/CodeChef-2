

==========---------------<<<<<  Question  >>>>> ------------------------------=============

You are given positive integers N and D

. You may perform operations of the following two types:

    add D

to N, i.e. change N to N+D
change N
to digitsum(N)

Here, digitsum(x)
is the sum of decimal digits of x. For example, digitsum(123)=1+2+3=6 and digitsum(100)=1+0+0=1

.

You may perform any number of operations (including zero) in any order. Please find the minimum obtainable value of N

and the minimum number of operations required to obtain this value.

-----------------------------------------------

Input

    The first line of the input contains a single integer T

denoting the number of test cases. The description of T
test cases follows.
The first and only line of each test case contains two space-separated integers N
and D

    .
-----------------------------------------------

Output

For each test case, print a single line containing two space-separated integers — the minimum value of N

and the minimum required number of operations.

---------------------------------------------------

Constraints

    1≤T≤10

1≤N,D≤1010

-----------------------------------------------

Subtasks

Subtask #1 (30 points): 1≤N,D≤100

Subtask #2 (70 points): original constraints

-----------------------------------------------

Example Input

3
2 1
9 3
11 13

----------------------------------------------

Example Output

1 9
3 2
1 4

-----------------------------------------------

Explanation

Example case 1: The value N=1
can be achieved by 8 successive "add" operations (changing N to 10) and one "digit-sum" operation.





==========---------------<<<<<  solution code  >>>>> ------------------------------=============




import java.util.Scanner;

import static java.sql.DriverManager.println;

public class practice {
    private static int n , d , t;
    private int sN = 0;
    private int operationCount = 0;
    private int tCount = 0;
    private int textCases;
    int[] nValues = new int[textCases];
    int[] dValues = new int[textCases];

    Scanner x = new Scanner(System.in);
    void perform() {
        textCases = x.nextInt();
        for(int i = 0 ; i <textCases ; i ++){
            nValues[i] = x.nextInt();
            dValues[i] = x.nextInt();
        }
        for(int j = 0 ; j<textCases ; j++) {
             n = nValues[j];
             d = dValues[j];
            for (int i = 1; i <= 10; i++) {
                t = n + d * i;
                if (t >= 10) {
                    t = digitSum(t);
                    operationCount = operationCount + tCount;
                    tCount = 0;
                }
                if (sN > t) {
                    sN = t;
                    operationCount = operationCount + i;
                }
            }
            println("" + sN + " " + operationCount);
        }
    }

    private int digitSum(int t) {
        int sum= 0;
        while(t>0){
            sum = sum + t%10;
            t =t/10;
            tCount = tCount + 1;

        }
        if(sum >= 10){
            digitSum(sum);
        }
        return sum;
    }
}
